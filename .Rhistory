## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Returns a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
y <- matrix(1:9, 3, 3)
y
cacheSolve(y)
makeCacheMatrix(y)
cacheSolve(y)
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)){
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
cacheSolve(y)
makeCacheMatrix(1:9)
cacheSolve(1:9)
y <- makeCacheMatrix(1:9)
cacheSolve(y)
y <- makeCacheMatrix(1:4)
cacheSolve(y)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
y <- makeCacheMatrix(1:4)
cacheSolve(y)
y <- makeCacheMatrix(1:4,2,2)
sample <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2)))
sample <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(sample)
